{"version":3,"sources":["Components/Cards.js","Components/Nav.js","Components/Rule.js","Components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["styleDiv","display","margin","styleImage","height","width","Cards","props","react_default","a","createElement","className","style","src","image","class","alt","name","data-index","id","onClick","function","styleNav","fontSize","fontWeight","color","paddingLeft","paddingRight","styleScore","marginRight","Nav","score","highScore","styleRule","textAlign","marginBottom","padding","Rule","Example","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClose","bind","assertThisInitialized","handleShow","state","show","setState","Fragment","Modal_default","onHide","Header","closeButton","Title","Body","React","Component","styleBody","backgroundColor","App","hightestScore","List","shuffledArray","showModal","Components_Modal","ClickHandler","e","sort","Math","random","console","log","target","getAttribute","concat","toConsumableArray","includes","_this2","Components_Nav","Components_Rule","map","item","Components_Cards","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1bf32ad6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst styleDiv ={\r\n  display: \"inline-block\",\r\n  margin: 10\r\n}\r\n\r\nconst styleImage = {\r\n  height: 200,\r\n  width: 150\r\n}\r\n\r\nconst Cards = props => {\r\n\r\n\r\n  return (\r\n    <div className=\"card-deck\" style={styleDiv}>\r\n  <div className=\"card\">\r\n    <img src={props.image} class=\"card-img-top\" alt={props.name} data-index={props.id} onClick={props.function} style= {styleImage} ></img>\r\n  </div>\r\n</div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n\r\n","import React from \"react\"\r\n\r\nconst styleNav = {\r\n  fontSize: 20,\r\n  fontWeight: \"bold\",\r\n  color: \"white\",\r\n  paddingLeft: 100,\r\n  paddingRight: 100\r\n}\r\n\r\nconst styleScore = {\r\n  marginRight: 100\r\n}\r\n\r\n\r\nconst Nav =props =>{\r\nreturn(<div>\r\n<nav className=\"navbar navbar-light  justify-content-between navbar-dark bg-primary\" style={styleNav}>\r\n  <p>Clicky Game</p>\r\n  <form className=\"form-inline\" >\r\n    <p style={styleScore}>Score : {props.score}</p>\r\n    <p>Highest Score : {props.highScore}</p>\r\n  </form>\r\n</nav>\r\n</div>\r\n)\r\n}\r\n\r\nexport default Nav;","import React from \"react\"\r\n\r\nconst styleRule = {\r\n    fontSize: 20,\r\n    textAlign: \"center\",\r\n    height: 40,\r\n    fontWeight: \"bold\",\r\n    marginBottom: 65,\r\n    padding: 20\r\n}\r\n\r\nconst Rule =props =>{\r\n    return(<div style = {styleRule}>\r\n    Help Avengers fight against Thanos. Send them in a secret mission. If you send same avenger twice, Thanos will find out and be victorous. \r\n    </div>\r\n    )\r\n    }\r\n\r\n\r\n    export default Rule;","import React from \"react\"\r\n\r\n\r\nimport Modal from 'react-bootstrap/Modal'\r\n\r\n\r\nclass Example extends React.Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    \r\n    this.handleClose = this.handleClose.bind(this);\r\n    this.handleShow = this.handleShow.bind(this);\r\n\r\n    this.state = {\r\n      show: true,\r\n    };\r\n  }\r\nhandleShow(){\r\n  this.setState({show: true}) \r\n}\r\n\r\n  handleClose(){\r\n    this.setState({show: false}) \r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n      \r\n        <Modal show={this.state.show}  onHide={this.handleClose}>\r\n          <Modal.Header closeButton onHide={this.handleShow}>\r\n            <Modal.Title>Modal heading</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\r\n         \r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Example","import React, {Component} from 'react';\n\nimport List from \"./cards\"\nimport Cards from \"./Components/Cards\"\nimport Nav from \"./Components/Nav\"\nimport Rule from \"./Components/Rule\"\nimport Modal from \"./Components/Modal\"\n\n\nconst styleBody = {\n  backgroundColor: \"rgb(120, 132, 30)\"\n}\n\n\nclass App extends Component{\n\nstate = {\n  score:0,\n  hightestScore: 0,\n  List: List,\n  shuffledArray:[],\n  showModal: false\n}\n\n\n\n\nshowModal = ()=> {\n  // eslint-disable-next-line no-unused-expressions\n  <Modal />\n}\n\nClickHandler = (e)=>{\n \n\n  return  (\n\n    \n    \n    this.setState({List: this.state.List.sort(() => Math.random() - 0.5)}),\n    console.log(e.target.getAttribute(\"data-index\")),\n   \n  \n\n   //this will add in array\n    this.setState({shuffledArray: [...this.state.shuffledArray,e.target.getAttribute(\"data-index\")]}),\n\n    \n\n    //Something to check in array and updating the score\n    console.log(this.state.shuffledArray.includes(e.target.getAttribute(\"data-index\"))),\n    !this.state.shuffledArray.includes(e.target.getAttribute(\"data-index\"))?\n    ( this.setState({shuffledArray: [...this.state.shuffledArray,e.target.getAttribute(\"data-index\")]}),\n    this.setState({ score: this.state.score + 1 })):\n\n   (this.setState({showModal: true}),\n     this.setState({ score: 0 }),\n   this.setState({shuffledArray: []}),\n   \n    this.state.hightestScore<this.state.score?\n   this.setState({hightestScore:this.state.score}):console.log(\"score not updated\")\n   ),\n\n  \n   console.log(this.state)\n  \n     \n\n  )\n}\n\n\n\n\n\n  render(){\n  return(<div style = {styleBody}>\n    <Nav score={this.state.score} highScore = {this.state.hightestScore}/>\n    <Rule />\n   \n    {this.state.List.map(item=>(<Cards name={item.name} image={item.image} function={this.ClickHandler} id={item.id} key={item.id}/>))}\n   \n   </div>)\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}